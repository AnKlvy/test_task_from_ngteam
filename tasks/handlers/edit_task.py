from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from database.tasks_repository import TasksRepository
from tasks.handlers.list_tasks import format_task_info
from tasks.keyboards.list_tasks import get_task_actions_kb
from tasks.keyboards.edit_task import get_edit_priority_kb

class EditTaskStates(StatesGroup):
    edit_text = State()
    edit_deadline = State()

router = Router()

@router.callback_query(F.data.startswith("edit_text_"))
async def edit_task_text(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_task_id=task_id)
    await state.set_state(EditTaskStates.edit_text)

    text = "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏**\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:"

    await callback.message.edit_text(text=text, parse_mode="Markdown")


@router.message(EditTaskStates.edit_text)
async def save_task_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    new_text = message.text.strip()

    if not new_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    success = await TasksRepository.update_task(task_id, message.from_user.id, text=new_text)

    if success:
        await state.clear()
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        task = await TasksRepository.get_by_id(task_id, message.from_user.id)
        if task:
            text = format_task_info(task)
            await message.answer(
                text=text,
                reply_markup=get_task_actions_kb(task_id),
                parse_mode="Markdown"
            )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


@router.callback_query(F.data.startswith("edit_deadline_"))
async def edit_task_deadline(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    await state.update_data(edit_task_id=task_id)
    await state.set_state(EditTaskStates.edit_deadline)

    text = "üìÖ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏**\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º**\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30"

    await callback.message.edit_text(text=text, parse_mode="Markdown")


@router.message(EditTaskStates.edit_deadline)
async def save_task_deadline(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    new_deadline_str = message.text.strip()

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
        new_deadline = datetime.strptime(new_deadline_str, "%d.%m.%Y %H:%M")

        success = await TasksRepository.update_task(task_id, message.from_user.id, deadline=new_deadline)

        if success:
            await state.clear()
            await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            task = await TasksRepository.get_by_id(task_id, message.from_user.id)
            if task:
                text = format_task_info(task)
                await message.answer(
                    text=text,
                    reply_markup=get_task_actions_kb(task_id),
                    parse_mode="Markdown"
                )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: **–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )


@router.callback_query(F.data.startswith("edit_priority_"))
async def edit_task_priority(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    task_id = int(callback.data.split("_")[-1])

    text = "‚ö° **–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏**\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"

    await callback.message.edit_text(
        text=text,
        reply_markup=get_edit_priority_kb(task_id),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("set_priority_"))
async def set_task_priority(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    priority = int(parts[3])

    success = await TasksRepository.update_task(task_id, callback.from_user.id, priority=priority)

    if success:
        await callback.answer("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        task = await TasksRepository.get_by_id(task_id, callback.from_user.id)
        if task:
            text = format_task_info(task)
            await callback.message.edit_text(
                text=text,
                reply_markup=get_task_actions_kb(task_id),
                parse_mode="Markdown"
            )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)
