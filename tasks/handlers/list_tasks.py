from typing import List

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from common.utils import get_priority_text
from database.tasks_repository import TasksRepository
from database.models import Tasks
from tasks.keyboards.list_tasks import (
    get_filters_kb, get_task_actions_kb, get_tasks_list_kb,
    get_confirm_delete_kb
)
from tasks.keyboards.edit_task import get_edit_task_kb

router = Router()


def get_status_text(status: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if status == 1 else "‚è≥ –ê–∫—Ç–∏–≤–Ω–∞"


def format_task_info(task: Tasks) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
    priority_text = get_priority_text(task.priority)
    status_text = get_status_text(task.status)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
    deadline_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if task.deadline:
        deadline_text = task.deadline.strftime('%d.%m.%Y –≤ %H:%M')

    text = f"üìã **–ó–∞–¥–∞—á–∞ #{task.id}**\n\n"
    text += f"üìù **–¢–µ–∫—Å—Ç:** {task.text}\n"
    text += f"üìÖ **–î–µ–¥–ª–∞–π–Ω:** {deadline_text}\n"
    text += f"‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_text}\n"
    text += f"üìä **–°—Ç–∞—Ç—É—Å:** {status_text}\n"
    text += f"üïê **–°–æ–∑–¥–∞–Ω–∞:** {task.created_at.strftime('%d.%m.%Y %H:%M')}"

    return text


def format_tasks_list(tasks: List[Tasks], filter_name: str = "–í—Å–µ –∑–∞–¥–∞—á–∏") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    if not tasks:
        return f"üìã **{filter_name}**\n\n‚ùå –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    text = f"üìã **{filter_name}** (–Ω–∞–π–¥–µ–Ω–æ: {len(tasks)})\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    return text


@router.callback_query(F.data == "list_tasks")
async def show_tasks_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    await state.clear()
    
    tasks = await TasksRepository.get_all_by_user(callback.from_user.id)
    
    text = format_tasks_list(tasks, "–í—Å–µ –∑–∞–¥–∞—á–∏")
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "show_filters")
async def show_filters(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
    text = "üéõ **–§–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞—á**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á:"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_filters_kb(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "filter_all")
async def filter_all_tasks(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä: –≤—Å–µ –∑–∞–¥–∞—á–∏"""
    tasks = await TasksRepository.get_all_by_user(callback.from_user.id)
    text = format_tasks_list(tasks, "–í—Å–µ –∑–∞–¥–∞—á–∏")
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "filter_today")
async def filter_today_tasks(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä: –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    tasks = await TasksRepository.get_today_tasks(callback.from_user.id)
    text = format_tasks_list(tasks, "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "filter_week")
async def filter_week_tasks(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä: –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    tasks = await TasksRepository.get_week_tasks(callback.from_user.id)
    text = format_tasks_list(tasks, "–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("filter_priority_"))
async def filter_priority_tasks(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä: –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    priority = int(callback.data.split("_")[-1])
    tasks = await TasksRepository.get_by_priority(callback.from_user.id, priority)
    
    priority_names = {1: "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 2: "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 3: "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"}
    filter_name = priority_names.get(priority, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    
    text = format_tasks_list(tasks, filter_name)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("view_task_"))
async def view_task(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    task = await TasksRepository.get_by_id(task_id, callback.from_user.id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = format_task_info(task)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_task_actions_kb(task_id),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    task_id = int(callback.data.split("_")[-1])
    
    success = await TasksRepository.update_status(task_id, callback.from_user.id, 1)
    
    if success:
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task = await TasksRepository.get_by_id(task_id, callback.from_user.id)
        if task:
            text = format_task_info(task)
            await callback.message.edit_text(
                text=text,
                reply_markup=get_task_actions_kb(task_id),
                parse_mode="Markdown"
            )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


@router.callback_query(F.data.startswith("edit_task_"))
async def edit_task_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    task = await TasksRepository.get_by_id(task_id, callback.from_user.id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
    deadline_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if task.deadline:
        deadline_text = task.deadline.strftime('%d.%m.%Y –≤ %H:%M')

    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task_id}**\n\n"
    text += f"üìù **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:** {task.text}\n"
    text += f"üìÖ **–¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω:** {deadline_text}\n"
    text += f"‚ö° **–¢–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {get_priority_text(task.priority)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_edit_task_kb(task_id),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("delete_task_"))
async def delete_task_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    task = await TasksRepository.get_by_id(task_id, callback.from_user.id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = f"üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task_id}**\n\n"
    text += f"üìù **–¢–µ–∫—Å—Ç:** {task.text[:100]}{'...' if len(task.text) > 100 else ''}\n\n"
    text += "‚ö†Ô∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?**\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_confirm_delete_kb(task_id),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_task(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[-1])
    
    success = await TasksRepository.delete_task(task_id, callback.from_user.id)
    
    if success:
        await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        tasks = await TasksRepository.get_all_by_user(callback.from_user.id)
        text = format_tasks_list(tasks, "–í—Å–µ –∑–∞–¥–∞—á–∏")
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_tasks_list_kb(tasks),
            parse_mode="Markdown"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


@router.callback_query(F.data == "refresh_tasks")
async def refresh_tasks(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    tasks = await TasksRepository.get_all_by_user(callback.from_user.id)
    text = format_tasks_list(tasks, "–í—Å–µ –∑–∞–¥–∞—á–∏")
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_tasks_list_kb(tasks),
        parse_mode="Markdown"
    )
    
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")


