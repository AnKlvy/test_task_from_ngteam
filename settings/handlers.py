"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from common.timezone_utils import get_available_timezones, get_timezone_display_name
from database.user_repository import UserRepository
from settings.keyboards import get_settings_kb, get_timezone_selection_kb
from main.main_kb import get_main_menu_kb

router = Router()


class SettingsStates(StatesGroup):
    main = State()
    timezone_selection = State()


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserRepository.get_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    current_timezone_display = get_timezone_display_name(user.tz)
    
    text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üåç **–¢–∞–π–º–∑–æ–Ω–∞:** {current_timezone_display}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –º–µ—Ç–æ–¥ edit_text (CallbackQuery) –∏–ª–∏ —ç—Ç–æ Message
    if hasattr(callback, 'message') and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            text=text,
            reply_markup=get_settings_kb(),
            parse_mode="Markdown"
        )
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer(
            text=text,
            reply_markup=get_settings_kb(),
            parse_mode="Markdown"
        )
    
    await state.set_state(SettingsStates.main)


@router.callback_query(F.data == "change_timezone")
async def show_timezone_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã"""
    available_timezones = get_available_timezones()
    
    text = (
        "üåç **–í—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–∞–π–º–∑–æ–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–æ–≤:"
    )
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_timezone_selection_kb(available_timezones),
        parse_mode="Markdown"
    )
    
    await state.set_state(SettingsStates.timezone_selection)


@router.callback_query(F.data.startswith("set_timezone_"))
async def set_timezone(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É"""
    timezone = callback.data.replace("set_timezone_", "")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await UserRepository.update_timezone(callback.from_user.id, timezone)
    
    if success:
        timezone_display = get_timezone_display_name(timezone)
        await callback.answer(f"‚úÖ –¢–∞–π–º–∑–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {timezone_display}", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await show_settings(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–∑–æ–Ω—ã", show_alert=True)


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await show_settings(callback, state)
