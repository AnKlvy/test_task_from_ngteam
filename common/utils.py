from typing import Union, Optional, Any

from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup


async def safe_edit_or_send(
    query: Union[CallbackQuery, Message],
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    set_state: Optional[Any] = None,
    state: Optional[FSMContext] = None
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

    Args:
        query: CallbackQuery –∏–ª–∏ Message –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        set_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        if set_state is not None and state is not None:
            await state.set_state(set_state)

        parse_mode = await choose_parse_mode(text)

        if isinstance(query, CallbackQuery):
            await query.message.edit_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif isinstance(query, Message):
            await query.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            raise ValueError("safe_edit_or_send: query must be CallbackQuery or Message")

    except Exception as e:
        await handle_telegram_bad_request(query, e, text, reply_markup)


async def handle_telegram_bad_request(
    query: Union[CallbackQuery, Message],
    exception: Exception,
    fallback_text: Optional[str] = None,
    fallback_markup: Optional[InlineKeyboardMarkup] = None
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ TelegramBadRequest

    Args:
        query: CallbackQuery –∏–ª–∏ Message –æ–±—ä–µ–∫—Ç
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        fallback_text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    exception_str = str(exception)

    if isinstance(exception, TelegramBadRequest):
        if "message can't be edited" in exception_str:
            text = fallback_text or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
            parse_mode = await choose_parse_mode(text)

            if isinstance(query, CallbackQuery):
                await query.message.bot.send_message(
                    chat_id=query.message.chat.id,
                    text=text,
                    reply_markup=fallback_markup,
                    parse_mode=parse_mode
                )
            elif isinstance(query, Message):
                await query.answer(
                    text,
                    reply_markup=fallback_markup,
                    parse_mode=parse_mode
                )
        elif "can't parse entities" in exception_str or "Unsupported start tag" in exception_str:
            text = fallback_text or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞."

            if isinstance(query, CallbackQuery):
                await query.message.edit_text(text=text, reply_markup=fallback_markup)
            elif isinstance(query, Message):
                await query.answer(text, reply_markup=fallback_markup)
        else:
            raise exception
    else:
        raise exception


async def choose_parse_mode(text):
    use_html = "<b>" in text or "<i>" in text or "<code>" in text or "<pre>" in text or "<a>" in text
    use_markdown = "[" in text and "](" in text and ")" in text
    if use_html:
        parse_mode = "HTML"
    elif use_markdown:
        parse_mode = "Markdown"
    else:
        parse_mode = None
    return parse_mode


def get_priority_text(priority: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority_map = {1: "üü¢ –ù–∏–∑–∫–∏–π", 2: "üü° –°—Ä–µ–¥–Ω–∏–π", 3: "üî¥ –í—ã—Å–æ–∫–∏–π"}
    return priority_map.get(priority, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
