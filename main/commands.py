from aiogram import Dispatcher, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand, Message, CallbackQuery

from main.main_handlers import show_main_menu, router
from main.main_kb import get_menu_kb, get_main_menu_kb


async def start_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    await state.clear()
    await show_main_menu(message, state=state)

async def new_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        from tasks.handlers.create_task import start_create_task
        await start_create_task(message, state)
    except ImportError:
        await message.answer("üìù –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

async def list_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    try:
        from tasks.handlers.list_tasks import show_tasks_list
        await show_tasks_list(message, state)
    except ImportError:
        await message.answer("üìã –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

async def settings_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∫–∞ CSV"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)

async def setup_commands(dp: Dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    dp.message.register(start_command, CommandStart())
    dp.message.register(new_command, Command("new"))
    dp.message.register(list_command, Command("list"))
    dp.message.register(settings_command, Command("settings"))
    dp.message.register(export_command, Command("export"))
    dp.message.register(help_command, Command("help"))


async def help_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Task Manager**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –≤ CSV\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_main_menu_kb())


async def export_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    await message.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


@router.callback_query(lambda c: c.data == "help")
async def help_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await help_command(callback.message, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "export_csv")
async def export_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≠–∫—Å–ø–æ—Ä—Ç CSV"""
    await export_command(callback.message, state)
    await callback.answer()
