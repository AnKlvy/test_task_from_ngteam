from aiogram import Dispatcher, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand, Message, CallbackQuery

from main.main_handlers import show_main_menu, router
from main.main_kb import get_menu_kb, get_main_menu_kb


async def start_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    await state.clear()
    await show_main_menu(message, state=state)

async def new_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        from tasks.handlers.create_task import start_create_task
        await start_create_task(message, state)
    except ImportError:
        await message.answer("üìù –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

async def list_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    try:
        from tasks.handlers.list_tasks import show_tasks_list
        await show_tasks_list(message, state)
    except ImportError:
        await message.answer("üìã –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

async def settings_command(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        from settings.handlers import show_settings
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

        fake_callback = FakeCallback(message)
        await show_settings(fake_callback, state)
    except ImportError:
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∫–∞ CSV"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)

async def setup_commands(dp: Dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    dp.message.register(start_command, CommandStart())
    dp.message.register(new_command, Command("new"))
    dp.message.register(list_command, Command("list"))
    dp.message.register(settings_command, Command("settings"))
    dp.message.register(export_command, Command("export"))
    dp.message.register(help_command, Command("help"))


async def help_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Task Manager**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –≤ CSV\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_menu_kb())


async def _perform_export(user_id: int, chat_id: int, bot):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from database.tasks_repository import TasksRepository
    from database.user_repository import UserRepository
    from tasks.services.csv_export import generate_csv_content, generate_filename
    from aiogram.types import BufferedInputFile
    from common.logger import get_logger

    logger = get_logger(__name__)
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await UserRepository.get_by_telegram_id(user_id)
    if not user:
        await bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = await TasksRepository.get_all_by_user(user_id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tasks) if tasks else 0} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not tasks:
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        await bot.send_message(chat_id, f"üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user.id}\n"
                             f"üì± Telegram ID: {user_id}")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
    csv_content = await generate_csv_content(tasks)
    logger.info(f"CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    filename = generate_filename(user_id)
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º: {filename}")


    csv_file = BufferedInputFile(
        csv_content.encode('utf-8-sig'),
        filename=filename
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await bot.send_document(
        chat_id=chat_id,
        document=csv_file,
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
               f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}\n"
               f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {filename.split('_')[-1].replace('.csv', '')}"
    )
    logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def export_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    try:
        await _perform_export(message.from_user.id, message.chat.id, message.bot)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")


@router.callback_query(lambda c: c.data == "help")
async def help_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await help_command(callback.message, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "export_csv")
async def export_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≠–∫—Å–ø–æ—Ä—Ç CSV"""
    try:
        await _perform_export(callback.from_user.id, callback.message.chat.id, callback.bot)
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
        await callback.answer()
